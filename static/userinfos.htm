<html>
    <head>
        <meta charset="utf-8"/>
        <script src='knockout-3.5.1.js'></script>
        <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
        <link rel="icon" type="image/gif" href=http://wiki.openid.net/f/openid-16x16.gif/>
    </head>

    <body class="w3-display-middle">
        <img src="https://openid.net/images/logo/openid-icon-100x100.png">
        <div class="w3-panel w3-round w3-orange w3-text-white">
            <h1><b>OpenID Connect</b></h1>
        </div>

        <div class="w3-text-orange">
            <h5><b>Fournisseur:</b></h5>
            <div><input class="w3-radio" type="radio" name="fournisseurs" value="Microsoft" data-bind="checked: fournisseur" /> <b>Microsoft</b></div>
            <div><input class="w3-radio" type="radio" name="fournisseurs" value="Google" data-bind="checked: fournisseur" /> <b>Google</b></div>
        </div>
        <button class="w3-button w3-round w3-orange w3-hover-amber w3-margin-top" data-bind="click: getUserInfos, enable: enableUserInfos">
            <b>UserInfos</b>
        </button>

        <div data-bind="visible: showUserInfos">
            <hr>
            <h3><b>UserInfos</b></h3>

            <table class="w3-table-all">
                <thead>
                    <tr class="w3-text-orange"><th>Propriété</th><th>Valeur</th></tr>
                </thead>
                <tbody data-bind="foreach: propriétés">
                    <tr>
                        <td data-bind="text: propriété"></td>
                        <td data-bind="text: valeur"></td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <script>
            if (sessionStorage.length > 0) {
                document.onreadystatechange = function () {
                    if (document.readyState === 'interactive') {
                        userInfosViewModel.fournisseur = ko.observable(sessionStorage.getItem("fournisseur"));
                        const actionAfterAuth = sessionStorage.getItem("actionAfterAuth");
                        sessionStorage.clear();
                        userInfosViewModel[actionAfterAuth]();
                    }
                }
            }

            const userInfosViewModel = {
                propriétés: ko.observableArray( [
                    { propriété: 'name', valeur : 'LOL' },
                    { propriété: 'name', valeur : 'LOL' }
                ]),

                fournisseur: ko.observable("Microsoft"),
            
                showUserInfos: function() {
                    ko.pureComputed(() => this.propriétés().length > 0)
                },

                enableUserInfos: ko.observable(true),

                getUserInfos: function() {
                    this.enableUserInfos = ko.observable(false);

                    const headers = new Headers({
                        'Content-Type': 'application/json',
                    });

                    const csrfCookie =
                        document.cookie
                        .split(';')
                        .find((item) => item.trim().startsWith('Csrf-Token='));
                    
                    if (csrfCookie) {
                        headers.set('X-Csrf-Token', csrfCookie.split('=')[1])
                    }

                    const request = new Request('/userinfos', {
                        method: 'POST',
                        headers: headers,
                        cache: 'no-cache',
                        redirect: 'error',
                        body: '{ "fournisseur": "' + this.fournisseur() + '" }'
                    });

                    fetch(request)
                    .then(response => response.json())
                    .then(data => {
                        if (data.hasOwnProperty("redirectOpenID")) {
                            sessionStorage.setItem("actionAfterAuth", "getUserInfos");
                            sessionStorage.setItem("fournisseur", this.fournisseur())
                            window.location.replace(data.redirectOpenID);
                        } else {
                            this.propriétés = ko.observableArray(data);
                            this.enableUserInfos = ko.observable(true);

                        }
                    })
                    .catch((error) => {
                        console.error('Erreur:', error);
                    });
                }
            }

            ko.applyBindings(userInfosViewModel);
        </script>

    </body>
</html>